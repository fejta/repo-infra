# gazelle:prefix k8s.io/repo-infra
# gazelle:proto disable_global
# gazelle:exclude hack

# Use the Bazel-vendored protobuf library since we use go_proto_library
# gazelle:resolve go github.com/golang/protobuf/proto @com_github_golang_protobuf//proto:go_default_library

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

load("//defs:run_in_workspace.bzl", "workspace_binary")

workspace_binary(
    name = "go",
    cmd = "@go_sdk//:bin/go",
)

load("@bazel_gazelle//:def.bzl", "gazelle")

GAZELLE_CMD = "//vendor/github.com/bazelbuild/bazel-gazelle/cmd/gazelle"

KAZEL_CMD = "//kazel"

# Need to use the build-in version for the initial run
gazelle(
    name = "gazelle-bootstrap",
    command = "fix",
    external = "vendored",
)

gazelle(
    name = "gazelle",
    command = "fix",
    external = "vendored",
    gazelle = GAZELLE_CMD,
)

gazelle(
    name = "gazelle-diff",
    command = "fix",
    external = "vendored",
    gazelle = GAZELLE_CMD,
    mode = "diff",
)

workspace_binary(
    name = "kazel-bin",  # kazel conflicts with //kazel
    args = [
        "--cfg-path=./hack/.kazelcfg.json",
    ],
    cmd = KAZEL_CMD,
)

workspace_binary(
    name = "kazel-diff",
    args = [
        "--dry-run",
        "--print-diff",
        "--cfg-path=./hack/.kazelcfg.json",
    ],
    cmd = KAZEL_CMD,
)

workspace_binary(
    name = "gofmt",
    cmd = "@go_sdk//:bin/gofmt",
)

workspace_binary(
    name = "golangci-lint",
    cmd = "//vendor/github.com/golangci/golangci-lint/cmd/golangci-lint",
)

load("@io_bazel_rules_go//go:def.bzl", "nogo")

nogo(
    name = "nogo_vet",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
    # These deps enable the analyses equivalent to running `go vet`.
    # Passing vet = True enables only a tiny subset of these (the ones
    # that are always correct).
    # You can see the what `go vet` does by running `go doc cmd/vet`.
    deps = [
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_tool_library",
        # cgocall appears to be confused by github.com/mattn/go-sqlite3 and fails
        # even when configured not to run. Given we don't use cgocall much, skip
        # it for now.
        # "@org_golang_x_tools//go/analysis/passes/cgocall:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/composite:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/lostcancel:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_tool_library",
        "@org_golang_x_tools//go/analysis/passes/unusedresult:go_tool_library",
    ],
)
