load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "appendAssign_checker.go",
        "appendCombine_checker.go",
        "argOrder_checker.go",
        "assignOp_checker.go",
        "badCall_checker.go",
        "badCond_checker.go",
        "boolExprSimplify_checker.go",
        "builtinShadow_checker.go",
        "captLocal_checker.go",
        "caseOrder_checker.go",
        "checkers.go",
        "codegenComment_checker.go",
        "commentFormatting_checker.go",
        "commentedOutCode_checker.go",
        "commentedOutImport_checker.go",
        "defaultCaseOrder_checker.go",
        "deprecatedComment_checker.go",
        "docStub_checker.go",
        "dupArg_checker.go",
        "dupBranchBody_checker.go",
        "dupCase_checker.go",
        "dupImports_checker.go",
        "dupSubExpr_checker.go",
        "elseif_checker.go",
        "emptyFallthrough_checker.go",
        "emptyStringTest_checker.go",
        "equalFold_checker.go",
        "evalOrder_checker.go",
        "exitAfterDefer_checker.go",
        "flagDeref_checker.go",
        "flagName_checker.go",
        "hexLiteral_checker.go",
        "hugeParam_checker.go",
        "ifElseChain_checker.go",
        "importShadow_checker.go",
        "indexAlloc_checker.go",
        "initClause_checker.go",
        "methodExprCall_checker.go",
        "nestingReduce_checker.go",
        "newDeref_checker.go",
        "nilValReturn_checker.go",
        "octalLiteral_checker.go",
        "offBy1_checker.go",
        "paramTypeCombine_checker.go",
        "ptrToRefParam_checker.go",
        "rangeExprCopy_checker.go",
        "rangeValCopy_checker.go",
        "regexpMust_checker.go",
        "singleCaseSwitch_checker.go",
        "sloppyLen_checker.go",
        "sloppyReassign_checker.go",
        "stringXbytes_checker.go",
        "switchTrue_checker.go",
        "typeAssertChain_checker.go",
        "typeSwitchVar_checker.go",
        "typeUnparen_checker.go",
        "underef_checker.go",
        "unlabelStmt_checker.go",
        "unlambda_checker.go",
        "unnamedResult_checker.go",
        "unnecessaryBlock_checker.go",
        "unslice_checker.go",
        "utils.go",
        "valSwap_checker.go",
        "weakCond_checker.go",
        "wrapperFunc_checker.go",
        "yodaStyleExpr_checker.go",
    ],
    importmap = "k8s.io/repo-infra/vendor/github.com/go-critic/go-critic/checkers",
    importpath = "github.com/go-critic/go-critic/checkers",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/go-critic/go-critic/checkers/internal/lintutil:go_default_library",
        "//vendor/github.com/go-lintpack/lintpack:go_default_library",
        "//vendor/github.com/go-lintpack/lintpack/astwalk:go_default_library",
        "//vendor/github.com/go-toolsmith/astcast:go_default_library",
        "//vendor/github.com/go-toolsmith/astcopy:go_default_library",
        "//vendor/github.com/go-toolsmith/astequal:go_default_library",
        "//vendor/github.com/go-toolsmith/astfmt:go_default_library",
        "//vendor/github.com/go-toolsmith/astp:go_default_library",
        "//vendor/github.com/go-toolsmith/strparse:go_default_library",
        "//vendor/github.com/go-toolsmith/typep:go_default_library",
        "//vendor/golang.org/x/tools/go/ast/astutil:go_default_library",
    ],
)
